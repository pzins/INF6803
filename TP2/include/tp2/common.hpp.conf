    #pragma once

    ////////////////////////////////////////////
    //
    // NOTE: THIS FILE SHOULD NOT BE MODIFIED!
    //
    ////////////////////////////////////////////

    #include <cmath>
    #include <vector>
    #include <iomanip>
    #include <fstream>
    #include <map>
    #include <queue>
    #include <map>
    #include <memory>
    #include <string>
    #include <array>
    #include <climits>
    #include <cstdlib>
    #include <cstdio>
    #include <cstdarg>
    #include <iterator>
    #include <algorithm>
    #include <type_traits>
    #include <numeric>
    #include <iostream>
    #include <exception>
    #include <opencv2/core.hpp>
    #include <opencv2/imgproc.hpp>
    #include <opencv2/highgui.hpp>

    #define DATA_ROOT_PATH "@DATA_ROOT_PATH@"

    // pure virtual interface for tracking algorithm
    struct Tracker {
        // (re)initializes internal model using the provided frame & ROI bounding box
        virtual void initialize(const cv::Mat& oInitFrame, const cv::Rect& oInitBBox) = 0;
        // estimates the target location for the given frame based on the internal model
        virtual void apply(const cv::Mat& oCurrFrame, cv::Rect& oOutputBBox, const cv::Rect& o) = 0;
        static std::shared_ptr<Tracker> createInstance();
        // virtual destructor for interface-based usage
        virtual ~Tracker() = default;
    };

    // converts a 4-value string (x,y,w,h) into a cv::Rect object
    inline cv::Rect convertToRect(const std::string& sLine) {
        // no error handling here, fingers crossed, dont reuse!
        cv::Rect oOutput;
        std::string sLineCopy = sLine;
        oOutput.x = std::atoi(sLineCopy.c_str());
        sLineCopy = sLineCopy.substr(sLineCopy.find(',')+1);
        oOutput.y = std::atoi(sLineCopy.c_str());
        sLineCopy = sLineCopy.substr(sLineCopy.find(',')+1);
        oOutput.width = std::atoi(sLineCopy.c_str());
        sLineCopy = sLineCopy.substr(sLineCopy.find(',')+1);
        oOutput.height = std::atoi(sLineCopy.c_str());
        return oOutput;
    }

    // vsnprintf wrapper for std::string output
    inline std::string putf(const char* acFormat, ...) {
        va_list vArgs;
        va_start(vArgs,acFormat);
        std::string vBuffer(1024,'\0');
    #ifdef _DEBUG
        if(((&vBuffer[0])+vBuffer.size()-1)!=&vBuffer[vBuffer.size()-1])
            throw std::runtime_error("basic_string should have contiguous memory (need C++11!)");
    #endif //defined(_DEBUG)
        const int nWritten = vsnprintf(&vBuffer[0],(int)vBuffer.size(),acFormat,vArgs);
        va_end(vArgs);
        if(nWritten<0)
            throw std::runtime_error("putf failed (1)");
        if((size_t)nWritten<=vBuffer.size()) {
            vBuffer.resize((size_t)nWritten);
            return vBuffer;
        }
        vBuffer.resize((size_t)nWritten+1);
        va_list vArgs2;
        va_start(vArgs2,acFormat);
        const int nWritten2 = vsnprintf(&vBuffer[0],(int)vBuffer.size(),acFormat,vArgs2);
        va_end(vArgs2);
        if(nWritten2<0 || (size_t)nWritten2>vBuffer.size())
            throw std::runtime_error("putf failed (2)");
        vBuffer.resize((size_t)nWritten2);
        return vBuffer;
    }
