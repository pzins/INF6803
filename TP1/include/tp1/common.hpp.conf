
#pragma once

////////////////////////////////////////////
//
// NOTE: THIS FILE SHOULD NOT BE MODIFIED!
//
////////////////////////////////////////////

#include <cmath>
#include <vector>
#include <iomanip>
#include <fstream>
#include <map>
#include <queue>
#include <map>
#include <memory>
#include <string>
#include <array>
#include <climits>
#include <cstdlib>
#include <cstdio>
#include <cstdarg>
#include <iterator>
#include <algorithm>
#include <type_traits>
#include <numeric>
#include <iostream>
#include <exception>
#include <opencv2/opencv.hpp>

#define DATA_ROOT_PATH "@DATA_ROOT_PATH@"

// as defined in the 2012/2014 CDNet evaluation scripts
#define DATASETUTILS_POSITIVE_VAL    uchar(255)
#define DATASETUTILS_NEGATIVE_VAL    uchar(0)
#define DATASETUTILS_OUTOFSCOPE_VAL  uchar(85)
#define DATASETUTILS_UNKNOWN_VAL     uchar(170)
#define DATASETUTILS_SHADOW_VAL      uchar(50)

// pure virtual interface for ViBe segmentation algorithm
struct ViBe {
    // (re)initializes all pixel models using the provided frame
    virtual void initialize(const cv::Mat& oInitFrame) = 0;
    // computes the segmentation mask for the current frame based on the internal model (also updates the model)
    virtual void apply(const cv::Mat& oCurrFrame, cv::Mat& oOutputMask) = 0;
    // returns an instance of an (uninitialized) ViBe segmentation algorithm with the given parameters
    static std::shared_ptr<ViBe> createInstance(size_t N, size_t R, size_t nMin, size_t nSigma);
    // virtual destructor for interface-based usage
    virtual ~ViBe() = default;
};

// helper class for binary classification metric computation
struct BinClassif {
    uint64_t nTP; // 'true positive' count
    uint64_t nTN; // 'true negative' count
    uint64_t nFP; // 'false positive' count
    uint64_t nFN; // 'false negative' count
    // returns the total classification count
    inline uint64_t total() const {
        return nTP+nTN+nFP+nFN;
    }
    // accumulates the classification counts of 'c' into the internal counts
    inline void accumulate(const BinClassif& c) {
        nTP += c.nTP; nTN += c.nTN; nFN += c.nFN; nFP += c.nFP;
    }
    // accumulates the pixel-level classification counts of 'oClassif' vs 'oGT' into the internal counts
    inline void accumulate(const cv::Mat& oClassif, const cv::Mat& oGT) {
        CV_Assert(!oClassif.empty() && oClassif.type()==CV_8UC1); // binary classifier results must be non-empty and of type 8UC1
        CV_Assert(!oGT.empty() && oGT.type()==CV_8UC1); // gt mat must be non-empty and of type 8UC1
        CV_Assert(oClassif.size()==oGT.size()); // all input mat sizes must match
        const size_t step_row = oClassif.step.p[0];
        for(size_t i = 0; i<(size_t)oClassif.rows; ++i) {
            const size_t idx_nstep = step_row*i;
            const uchar* input_step_ptr = oClassif.data+idx_nstep;
            const uchar* gt_step_ptr = oGT.data+idx_nstep;
//            const uchar* roi_step_ptr = oROI.data+idx_nstep;
            for(int j = 0; j<oClassif.cols; ++j) {
                if(gt_step_ptr[j]!=DATASETUTILS_OUTOFSCOPE_VAL && gt_step_ptr[j]!=DATASETUTILS_UNKNOWN_VAL) {
                    if(input_step_ptr[j]==DATASETUTILS_POSITIVE_VAL) {
                        if(gt_step_ptr[j]==DATASETUTILS_POSITIVE_VAL)
                            ++nTP;
                        else // gt_step_ptr[j]==s_nSegmNegative
                            ++nFP;
                    }
                    else { // input_step_ptr[j]==s_nSegmNegative
                        if(gt_step_ptr[j]==DATASETUTILS_POSITIVE_VAL)
                            ++nFN;
                        else // gt_step_ptr[j]==s_nSegmNegative
                            ++nTN;
                    }
                }
            }
        }
    }
    // default constructor; sets all counters to zero
    inline BinClassif() : nTP(0),nTN(0),nFP(0),nFN(0) {}
};

// vsnprintf wrapper for std::string output
inline std::string putf(const char* acFormat, ...) {
    va_list vArgs;
    va_start(vArgs,acFormat);
    std::string vBuffer(1024,'\0');
#ifdef _DEBUG
    if(((&vBuffer[0])+vBuffer.size()-1)!=&vBuffer[vBuffer.size()-1])
        throw std::runtime_error("basic_string should have contiguous memory (need C++11!)");
#endif //defined(_DEBUG)
    const int nWritten = vsnprintf(&vBuffer[0],(int)vBuffer.size(),acFormat,vArgs);
    va_end(vArgs);
    if(nWritten<0)
        throw std::runtime_error("putf failed (1)");
    if((size_t)nWritten<=vBuffer.size()) {
        vBuffer.resize((size_t)nWritten);
        return vBuffer;
    }
    vBuffer.resize((size_t)nWritten+1);
    va_list vArgs2;
    va_start(vArgs2,acFormat);
    const int nWritten2 = vsnprintf(&vBuffer[0],(int)vBuffer.size(),acFormat,vArgs2);
    va_end(vArgs2);
    if(nWritten2<0 || (size_t)nWritten2>vBuffer.size())
        throw std::runtime_error("putf failed (2)");
    vBuffer.resize((size_t)nWritten2);
    return vBuffer;
}
